
as608.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e2  00800100  00000a34  00000aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021c5  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bad  00000000  00000000  000030e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e96  00000000  00000000  00003c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000029c  00000000  00000000  00004b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f4  00000000  00000000  00004dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011bf  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00006573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	57 04       	cpc	r5, r7
  6a:	0f 04       	cpc	r0, r15
  6c:	12 04       	cpc	r1, r2
  6e:	15 04       	cpc	r1, r5
  70:	54 04       	cpc	r5, r4
  72:	54 04       	cpc	r5, r4
  74:	18 04       	cpc	r1, r8
  76:	1b 04       	cpc	r1, r11
  78:	1e 04       	cpc	r1, r14
  7a:	21 04       	cpc	r2, r1
  7c:	24 04       	cpc	r2, r4
  7e:	27 04       	cpc	r2, r7
  80:	2a 04       	cpc	r2, r10
  82:	2d 04       	cpc	r2, r13
  84:	30 04       	cpc	r3, r0
  86:	33 04       	cpc	r3, r3
  88:	36 04       	cpc	r3, r6
  8a:	39 04       	cpc	r3, r9
  8c:	54 04       	cpc	r5, r4
  8e:	3c 04       	cpc	r3, r12
  90:	54 04       	cpc	r5, r4
  92:	3f 04       	cpc	r3, r15
  94:	54 04       	cpc	r5, r4
  96:	54 04       	cpc	r5, r4
  98:	42 04       	cpc	r4, r2
  9a:	45 04       	cpc	r4, r5
  9c:	48 04       	cpc	r4, r8
  9e:	4b 04       	cpc	r4, r11
  a0:	4e 04       	cpc	r4, r14
  a2:	51 04       	cpc	r5, r1

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	13 e0       	ldi	r17, 0x03	; 3
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e4 e3       	ldi	r30, 0x34	; 52
  b8:	fa e0       	ldi	r31, 0x0A	; 10
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a2 3e       	cpi	r26, 0xE2	; 226
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>
  c6:	0e 94 24 03 	call	0x648	; 0x648 <main>
  ca:	0c 94 18 05 	jmp	0xa30	; 0xa30 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <LCDBusyLoop>:
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	5e 9a       	sbi	0x0b, 6	; 11
  da:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x12>
  e4:	2c 9a       	sbi	0x05, 4	; 5
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	9a 95       	dec	r25
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCDBusyLoop+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCDBusyLoop+0x1c>
  ee:	83 b1       	in	r24, 0x03	; 3
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDBusyLoop+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCDBusyLoop+0x2a>
  fc:	2c 98       	cbi	0x05, 4	; 5
  fe:	95 e0       	ldi	r25, 0x05	; 5
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <LCDBusyLoop+0x2e>
 104:	00 00       	nop
 106:	2c 9a       	sbi	0x05, 4	; 5
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCDBusyLoop+0x38>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCDBusyLoop+0x3e>
 110:	93 b1       	in	r25, 0x03	; 3
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	9a 95       	dec	r25
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDBusyLoop+0x42>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCDBusyLoop+0x48>
 11a:	2c 98       	cbi	0x05, 4	; 5
 11c:	95 e0       	ldi	r25, 0x05	; 5
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <LCDBusyLoop+0x4c>
 122:	00 00       	nop
 124:	88 23       	and	r24, r24
 126:	f4 f2       	brlt	.-68     	; 0xe4 <LCDBusyLoop+0x12>
 128:	5e 98       	cbi	0x0b, 6	; 11
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	84 b9       	out	0x04, r24	; 4
 130:	08 95       	ret

00000132 <LCDByte>:
 132:	28 2f       	mov	r18, r24
 134:	22 95       	swap	r18
 136:	2f 70       	andi	r18, 0x0F	; 15
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	61 11       	cpse	r22, r1
 13c:	02 c0       	rjmp	.+4      	; 0x142 <LCDByte+0x10>
 13e:	5b 98       	cbi	0x0b, 3	; 11
 140:	01 c0       	rjmp	.+2      	; 0x144 <LCDByte+0x12>
 142:	5b 9a       	sbi	0x0b, 3	; 11
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDByte+0x14>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDByte+0x1a>
 14c:	2c 9a       	sbi	0x05, 4	; 5
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	90 7f       	andi	r25, 0xF0	; 240
 152:	92 2b       	or	r25, r18
 154:	95 b9       	out	0x05, r25	; 5
 156:	95 e0       	ldi	r25, 0x05	; 5
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDByte+0x26>
 15c:	00 00       	nop
 15e:	2c 98       	cbi	0x05, 4	; 5
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDByte+0x30>
 166:	00 00       	nop
 168:	2c 9a       	sbi	0x05, 4	; 5
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	90 7f       	andi	r25, 0xF0	; 240
 16e:	89 2b       	or	r24, r25
 170:	85 b9       	out	0x05, r24	; 5
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <LCDByte+0x42>
 178:	00 00       	nop
 17a:	2c 98       	cbi	0x05, 4	; 5
 17c:	95 e0       	ldi	r25, 0x05	; 5
 17e:	9a 95       	dec	r25
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDByte+0x4c>
 182:	00 00       	nop
 184:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDBusyLoop>
 188:	08 95       	ret

0000018a <LCDWriteString>:
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
 194:	fc 01       	movw	r30, r24
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	09 f1       	breq	.+66     	; 0x1de <LCDWriteString+0x54>
 19c:	85 32       	cpi	r24, 0x25	; 37
 19e:	a9 f4       	brne	.+42     	; 0x1ca <LCDWriteString+0x40>
 1a0:	e8 01       	movw	r28, r16
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	f8 01       	movw	r30, r16
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	80 53       	subi	r24, 0x30	; 48
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <LCDWriteString+0x2c>
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 1b4:	0e c0       	rjmp	.+28     	; 0x1d2 <LCDWriteString+0x48>
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	f8 01       	movw	r30, r16
 1c2:	81 81       	ldd	r24, Z+1	; 0x01
 1c4:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <LCDWriteString+0x48>
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 1d0:	e8 01       	movw	r28, r16
 1d2:	8e 01       	movw	r16, r28
 1d4:	0f 5f       	subi	r16, 0xFF	; 255
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	81 11       	cpse	r24, r1
 1dc:	df cf       	rjmp	.-66     	; 0x19c <LCDWriteString+0x12>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <LCDWriteInt>:
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <LCDWriteInt+0xe>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <LCDWriteInt+0x10>
 1f8:	1f 92       	push	r1
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	7b 01       	movw	r14, r22
 200:	fe 01       	movw	r30, r28
 202:	31 96       	adiw	r30, 0x01	; 1
 204:	25 e0       	ldi	r18, 0x05	; 5
 206:	df 01       	movw	r26, r30
 208:	1d 92       	st	X+, r1
 20a:	2a 95       	dec	r18
 20c:	e9 f7       	brne	.-6      	; 0x208 <LCDWriteInt+0x20>
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	59 f0       	breq	.+22     	; 0x228 <LCDWriteInt+0x40>
 212:	35 96       	adiw	r30, 0x05	; 5
 214:	2a e0       	ldi	r18, 0x0A	; 10
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	b9 01       	movw	r22, r18
 21a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__divmodhi4>
 21e:	82 93       	st	-Z, r24
 220:	86 2f       	mov	r24, r22
 222:	97 2f       	mov	r25, r23
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	c1 f7       	brne	.-16     	; 0x218 <LCDWriteInt+0x30>
 228:	bf ef       	ldi	r27, 0xFF	; 255
 22a:	eb 16       	cp	r14, r27
 22c:	fb 06       	cpc	r15, r27
 22e:	69 f4       	brne	.+26     	; 0x24a <LCDWriteInt+0x62>
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	81 11       	cpse	r24, r1
 234:	1e c0       	rjmp	.+60     	; 0x272 <LCDWriteInt+0x8a>
 236:	fe 01       	movw	r30, r28
 238:	32 96       	adiw	r30, 0x02	; 2
 23a:	00 e0       	ldi	r16, 0x00	; 0
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	0f 5f       	subi	r16, 0xFF	; 255
 240:	1f 4f       	sbci	r17, 0xFF	; 255
 242:	81 91       	ld	r24, Z+
 244:	88 23       	and	r24, r24
 246:	d9 f3       	breq	.-10     	; 0x23e <LCDWriteInt+0x56>
 248:	10 c0       	rjmp	.+32     	; 0x26a <LCDWriteInt+0x82>
 24a:	05 e0       	ldi	r16, 0x05	; 5
 24c:	10 e0       	ldi	r17, 0x00	; 0
 24e:	0e 19       	sub	r16, r14
 250:	1f 09       	sbc	r17, r15
 252:	0b c0       	rjmp	.+22     	; 0x26a <LCDWriteInt+0x82>
 254:	f8 01       	movw	r30, r16
 256:	81 91       	ld	r24, Z+
 258:	8f 01       	movw	r16, r30
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	80 5d       	subi	r24, 0xD0	; 208
 25e:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 262:	0e 15       	cp	r16, r14
 264:	1f 05       	cpc	r17, r15
 266:	b1 f7       	brne	.-20     	; 0x254 <LCDWriteInt+0x6c>
 268:	11 c0       	rjmp	.+34     	; 0x28c <LCDWriteInt+0xa4>
 26a:	05 30       	cpi	r16, 0x05	; 5
 26c:	11 05       	cpc	r17, r1
 26e:	1c f0       	brlt	.+6      	; 0x276 <LCDWriteInt+0x8e>
 270:	0d c0       	rjmp	.+26     	; 0x28c <LCDWriteInt+0xa4>
 272:	00 e0       	ldi	r16, 0x00	; 0
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	8c 0f       	add	r24, r28
 27c:	9d 1f       	adc	r25, r29
 27e:	08 0f       	add	r16, r24
 280:	19 1f       	adc	r17, r25
 282:	7e 01       	movw	r14, r28
 284:	96 e0       	ldi	r25, 0x06	; 6
 286:	e9 0e       	add	r14, r25
 288:	f1 1c       	adc	r15, r1
 28a:	e4 cf       	rjmp	.-56     	; 0x254 <LCDWriteInt+0x6c>
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	08 95       	ret

000002a4 <LCDGotoXY>:
 2a4:	84 31       	cpi	r24, 0x14	; 20
 2a6:	78 f4       	brcc	.+30     	; 0x2c6 <LCDGotoXY+0x22>
 2a8:	62 30       	cpi	r22, 0x02	; 2
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <LCDGotoXY+0x14>
 2ac:	63 30       	cpi	r22, 0x03	; 3
 2ae:	31 f0       	breq	.+12     	; 0x2bc <LCDGotoXY+0x18>
 2b0:	61 30       	cpi	r22, 0x01	; 1
 2b2:	29 f4       	brne	.+10     	; 0x2be <LCDGotoXY+0x1a>
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <LCDGotoXY+0x1a>
 2b8:	8c 5e       	subi	r24, 0xEC	; 236
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <LCDGotoXY+0x1a>
 2bc:	8c 5a       	subi	r24, 0xAC	; 172
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 2c6:	08 95       	ret

000002c8 <LCDInit>:
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	86 e7       	ldi	r24, 0x76	; 118
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <LCDInit+0x10>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCDInit+0x1a>
 2e2:	00 00       	nop
 2e4:	84 b1       	in	r24, 0x04	; 4
 2e6:	8f 60       	ori	r24, 0x0F	; 15
 2e8:	84 b9       	out	0x04, r24	; 4
 2ea:	24 9a       	sbi	0x04, 4	; 4
 2ec:	53 9a       	sbi	0x0a, 3	; 10
 2ee:	56 9a       	sbi	0x0a, 6	; 10
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	85 b9       	out	0x05, r24	; 5
 2f6:	2c 98       	cbi	0x05, 4	; 5
 2f8:	5e 98       	cbi	0x0b, 6	; 11
 2fa:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCDInit+0x36>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCDInit+0x38>
 300:	00 00       	nop
 302:	2c 9a       	sbi	0x05, 4	; 5
 304:	29 9a       	sbi	0x05, 1	; 5
 306:	25 e0       	ldi	r18, 0x05	; 5
 308:	2a 95       	dec	r18
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCDInit+0x40>
 30c:	00 00       	nop
 30e:	2c 98       	cbi	0x05, 4	; 5
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <LCDInit+0x4a>
 316:	00 00       	nop
 318:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDBusyLoop>
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8c 2f       	mov	r24, r28
 320:	8c 60       	ori	r24, 0x0C	; 12
 322:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	80 e4       	ldi	r24, 0x40	; 64
 332:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 336:	c0 e0       	ldi	r28, 0x00	; 0
 338:	d1 e0       	ldi	r29, 0x01	; 1
 33a:	00 e4       	ldi	r16, 0x40	; 64
 33c:	11 e0       	ldi	r17, 0x01	; 1
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	89 91       	ld	r24, Y+
 342:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 346:	c0 17       	cp	r28, r16
 348:	d1 07       	cpc	r29, r17
 34a:	c9 f7       	brne	.-14     	; 0x33e <LCDInit+0x76>
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <LCDClearLineXY>:
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	d8 2f       	mov	r29, r24
 366:	16 2f       	mov	r17, r22
 368:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 36c:	d0 31       	cpi	r29, 0x10	; 16
 36e:	40 f4       	brcc	.+16     	; 0x380 <LCDClearLineXY+0x22>
 370:	cd 2f       	mov	r28, r29
 372:	80 e4       	ldi	r24, 0x40	; 64
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 37a:	cf 5f       	subi	r28, 0xFF	; 255
 37c:	c0 31       	cpi	r28, 0x10	; 16
 37e:	c9 f7       	brne	.-14     	; 0x372 <LCDClearLineXY+0x14>
 380:	61 2f       	mov	r22, r17
 382:	8d 2f       	mov	r24, r29
 384:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	08 95       	ret

00000390 <keys_init>:
    }
}

void keys_init()
{
	DDRC &= ~(1<<PINC0); //init Enroll Key as input
 390:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1<<PINC2); //init Scan key as input
 392:	3a 98       	cbi	0x07, 2	; 7
	PORTC |= 1<<PINC0;
 394:	40 9a       	sbi	0x08, 0	; 8
	PORTC |= 1<<PINC2;
 396:	42 9a       	sbi	0x08, 2	; 8
 398:	08 95       	ret

0000039a <process_result>:
	_delay_ms(4000);
	LCDClear();
}

void process_result(uint16_t ret)
{
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
   LCDClearLineXY(0,1);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 af 01 	call	0x35e	; 0x35e <LCDClearLineXY>
   LCDWriteStringXY(0,1,finger_get_response_string(ret));
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 3ae:	8c 2f       	mov	r24, r28
 3b0:	0e 94 05 04 	call	0x80a	; 0x80a <finger_get_response_string>
 3b4:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	87 ea       	ldi	r24, 0xA7	; 167
 3bc:	91 e6       	ldi	r25, 0x61	; 97
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <process_result+0x24>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <process_result+0x2e>
 3c8:	00 00       	nop
   _delay_ms(2000);	
}
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <finger_enrollment>:
	
}

void finger_enrollment()
{
	LCDClear();
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Deleting");
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 3de:	82 e4       	ldi	r24, 0x42	; 66
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_delete_all());
 3e6:	0e 94 9e 04 	call	0x93c	; 0x93c <finger_delete_all>
 3ea:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
	LCDClear();
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Enrollment");
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 3fe:	8b e4       	ldi	r24, 0x4B	; 75
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	LCDWriteStringXY(0,1,"Place Finger");
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 40e:	86 e5       	ldi	r24, 0x56	; 86
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 416:	2f ef       	ldi	r18, 0xFF	; 255
 418:	87 ea       	ldi	r24, 0xA7	; 167
 41a:	91 e6       	ldi	r25, 0x61	; 97
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
	_delay_ms(2000);
	LCDClear();
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Finger Reading 1");
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 438:	83 e6       	ldi	r24, 0x63	; 99
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_read());
 440:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <finger_read>
 444:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
	LCDClear();
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Generating char")
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 458:	84 e7       	ldi	r24, 0x74	; 116
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_generate_char_file(1));
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 77 04 	call	0x8ee	; 0x8ee <finger_generate_char_file>
 468:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
	LCDClear();
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Finger Reading 2");
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 47c:	84 e8       	ldi	r24, 0x84	; 132
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_read());
 484:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <finger_read>
 488:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
	LCDClear();
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Generating char")
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 49c:	84 e7       	ldi	r24, 0x74	; 116
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_generate_char_file(2));
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 77 04 	call	0x8ee	; 0x8ee <finger_generate_char_file>
 4ac:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
	LCDClear();
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Generate temp");
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 4c0:	85 e9       	ldi	r24, 0x95	; 149
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_generate_template());
 4c8:	0e 94 8e 04 	call	0x91c	; 0x91c <finger_generate_template>
 4cc:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
	LCDClear();
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Storing..");
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 4e0:	83 ea       	ldi	r24, 0xA3	; 163
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_store(2));
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 ae 04 	call	0x95c	; 0x95c <finger_store>
 4f0:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	8f e4       	ldi	r24, 0x4F	; 79
 4f8:	93 ec       	ldi	r25, 0xC3	; 195
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	80 40       	sbci	r24, 0x00	; 0
 4fe:	90 40       	sbci	r25, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 504:	00 00       	nop
	_delay_ms(4000);	
	LCDClear();
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 50e:	08 95       	ret

00000510 <finger_scan>:
}


void finger_scan()
{   uint16_t code;
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
	LCDClear();
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Welcome!");
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 524:	8d ea       	ldi	r24, 0xAD	; 173
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	LCDWriteStringXY(0,1,"Place finger");
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 534:	86 eb       	ldi	r24, 0xB6	; 182
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	while(finger_read()!=0x00);
 53c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <finger_read>
 540:	89 2b       	or	r24, r25
 542:	e1 f7       	brne	.-8      	; 0x53c <finger_scan+0x2c>
	LCDClear();
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Scanning...");
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 554:	83 ec       	ldi	r24, 0xC3	; 195
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	83 ed       	ldi	r24, 0xD3	; 211
 560:	90 e3       	ldi	r25, 0x30	; 48
 562:	21 50       	subi	r18, 0x01	; 1
 564:	80 40       	sbci	r24, 0x00	; 0
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <finger_scan+0x52>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <finger_scan+0x5c>
 56c:	00 00       	nop
	_delay_ms(1000);
	LCDWriteStringXY(0,1,"Completed");
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 576:	8f ec       	ldi	r24, 0xCF	; 207
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 57e:	2f ef       	ldi	r18, 0xFF	; 255
 580:	83 ed       	ldi	r24, 0xD3	; 211
 582:	90 e3       	ldi	r25, 0x30	; 48
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <finger_scan+0x74>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <finger_scan+0x7e>
 58e:	00 00       	nop
	_delay_ms(1000);
	LCDClear();
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"generating char");
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 5a0:	89 ed       	ldi	r24, 0xD9	; 217
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_generate_char_file(1));
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 77 04 	call	0x8ee	; 0x8ee <finger_generate_char_file>
 5b0:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
	LCDClear();
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Searching...");
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 5c4:	89 ee       	ldi	r24, 0xE9	; 233
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	code = finger_search();
 5cc:	0e 94 cb 04 	call	0x996	; 0x996 <finger_search>
 5d0:	ec 01       	movw	r28, r24
	process_result(code);
 5d2:	0e 94 cd 01 	call	0x39a	; 0x39a <process_result>
	if(code==0x00)
 5d6:	20 97       	sbiw	r28, 0x00	; 0
 5d8:	d1 f4       	brne	.+52     	; 0x60e <finger_scan+0xfe>
	{
			LCDClear();
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
			// LCDWriteStringXY(0,1,"Success");
			LCDWriteIntXY(0,1,code,6);
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 5ea:	66 e0       	ldi	r22, 0x06	; 6
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDWriteInt>
		PORTC &=~(1<<PINC5);
 5f6:	45 98       	cbi	0x08, 5	; 8
 5f8:	2f ef       	ldi	r18, 0xFF	; 255
 5fa:	83 e2       	ldi	r24, 0x23	; 35
 5fc:	94 ef       	ldi	r25, 0xF4	; 244
 5fe:	21 50       	subi	r18, 0x01	; 1
 600:	80 40       	sbci	r24, 0x00	; 0
 602:	90 40       	sbci	r25, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <finger_scan+0xee>
 606:	00 c0       	rjmp	.+0      	; 0x608 <finger_scan+0xf8>
 608:	00 00       	nop
		_delay_ms(5000);
		PORTC |= 1<<PINC5;
 60a:	45 9a       	sbi	0x08, 5	; 8
 60c:	0d c0       	rjmp	.+26     	; 0x628 <finger_scan+0x118>
	}
	else{
					LCDClear();
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
					//LCDWriteStringXY(0,1,"Error");
					LCDWriteIntXY(0,1,code,6);
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 61e:	66 e0       	ldi	r22, 0x06	; 6
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	ce 01       	movw	r24, r28
 624:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDWriteInt>
 628:	2f ef       	ldi	r18, 0xFF	; 255
 62a:	8f e4       	ldi	r24, 0x4F	; 79
 62c:	93 ec       	ldi	r25, 0xC3	; 195
 62e:	21 50       	subi	r18, 0x01	; 1
 630:	80 40       	sbci	r24, 0x00	; 0
 632:	90 40       	sbci	r25, 0x00	; 0
 634:	e1 f7       	brne	.-8      	; 0x62e <finger_scan+0x11e>
 636:	00 c0       	rjmp	.+0      	; 0x638 <finger_scan+0x128>
 638:	00 00       	nop
	}
	_delay_ms(4000);
	LCDClear();
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
}
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <main>:
void process_result(uint16_t ret);


int main(void)
{
	LCDInit(LS_NONE);
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCDInit>
	finger_init();
 64e:	0e 94 48 03 	call	0x690	; 0x690 <finger_init>
	keys_init();
 652:	0e 94 c8 01 	call	0x390	; 0x390 <keys_init>
	DDRC |= 1<<PINC5;
 656:	3d 9a       	sbi	0x07, 5	; 7
	PORTC |= 1<<PINC5;
 658:	45 9a       	sbi	0x08, 5	; 8
	
    
    while (1) 
    { 
		LCDWriteStringXY(0,0,"Welcome!");
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDGotoXY>
 662:	8d ea       	ldi	r24, 0xAD	; 173
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 66a:	2f ef       	ldi	r18, 0xFF	; 255
 66c:	87 ea       	ldi	r24, 0xA7	; 167
 66e:	91 e6       	ldi	r25, 0x61	; 97
 670:	21 50       	subi	r18, 0x01	; 1
 672:	80 40       	sbci	r24, 0x00	; 0
 674:	90 40       	sbci	r25, 0x00	; 0
 676:	e1 f7       	brne	.-8      	; 0x670 <main+0x28>
 678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x32>
 67a:	00 00       	nop
		_delay_ms(2000);
		if(enroll_key_press())
 67c:	30 99       	sbic	0x06, 0	; 6
 67e:	03 c0       	rjmp	.+6      	; 0x686 <main+0x3e>
		{
			finger_enrollment();
 680:	0e 94 e7 01 	call	0x3ce	; 0x3ce <finger_enrollment>
 684:	ea cf       	rjmp	.-44     	; 0x65a <main+0x12>
		}
		else if (finger_Scann_Key_press())
 686:	32 99       	sbic	0x06, 2	; 6
 688:	e8 cf       	rjmp	.-48     	; 0x65a <main+0x12>
		{
			finger_scan();
 68a:	0e 94 88 02 	call	0x510	; 0x510 <finger_scan>
 68e:	e5 cf       	rjmp	.-54     	; 0x65a <main+0x12>

00000690 <finger_init>:
 690:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 694:	80 e1       	ldi	r24, 0x10	; 16
 696:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 69a:	e1 ec       	ldi	r30, 0xC1	; 193
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	88 61       	ori	r24, 0x18	; 24
 6a2:	80 83       	st	Z, r24
 6a4:	e2 ec       	ldi	r30, 0xC2	; 194
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	8e 60       	ori	r24, 0x0E	; 14
 6ac:	80 83       	st	Z, r24
 6ae:	08 95       	ret

000006b0 <finger_uart_transmit>:
 6b0:	e0 ec       	ldi	r30, 0xC0	; 192
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	90 81       	ld	r25, Z
 6b6:	95 ff       	sbrs	r25, 5
 6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <finger_uart_transmit+0x4>
 6ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6be:	08 95       	ret

000006c0 <finger_uart_recieve>:
 6c0:	e0 ec       	ldi	r30, 0xC0	; 192
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	88 23       	and	r24, r24
 6c8:	ec f7       	brge	.-6      	; 0x6c4 <finger_uart_recieve+0x4>
 6ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6ce:	08 95       	ret

000006d0 <finger_transmit_header>:
 6d0:	cf 93       	push	r28
 6d2:	c8 2f       	mov	r28, r24
 6d4:	8f ee       	ldi	r24, 0xEF	; 239
 6d6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 6ec:	8f ef       	ldi	r24, 0xFF	; 255
 6ee:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 704:	8c 2f       	mov	r24, r28
 706:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <finger_receive>:
 70e:	0f 93       	push	r16
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 71a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 71e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 722:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 726:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 72a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 72e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 732:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 736:	c8 2f       	mov	r28, r24
 738:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 73c:	d0 e0       	ldi	r29, 0x00	; 0
 73e:	dc 2f       	mov	r29, r28
 740:	cc 27       	eor	r28, r28
 742:	c8 2b       	or	r28, r24
 744:	22 97       	sbiw	r28, 0x02	; 2
 746:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 74a:	08 2f       	mov	r16, r24
 74c:	10 e0       	ldi	r17, 0x00	; 0
 74e:	c2 30       	cpi	r28, 0x02	; 2
 750:	d1 05       	cpc	r29, r1
 752:	39 f4       	brne	.+14     	; 0x762 <finger_receive+0x54>
 754:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 758:	08 2f       	mov	r16, r24
 75a:	10 e0       	ldi	r17, 0x00	; 0
 75c:	10 2f       	mov	r17, r16
 75e:	00 27       	eor	r16, r16
 760:	0e c0       	rjmp	.+28     	; 0x77e <finger_receive+0x70>
 762:	23 97       	sbiw	r28, 0x03	; 3
 764:	61 f4       	brne	.+24     	; 0x77e <finger_receive+0x70>
 766:	01 15       	cp	r16, r1
 768:	11 05       	cpc	r17, r1
 76a:	49 f4       	brne	.+18     	; 0x77e <finger_receive+0x70>
 76c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 770:	08 2f       	mov	r16, r24
 772:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 776:	10 e0       	ldi	r17, 0x00	; 0
 778:	10 2f       	mov	r17, r16
 77a:	00 27       	eor	r16, r16
 77c:	08 2b       	or	r16, r24
 77e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 782:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 786:	c8 01       	movw	r24, r16
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	08 95       	ret

00000792 <finger_search_receive>:
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 79a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 79e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7a2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7a6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7aa:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7ae:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7b2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7b6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7be:	81 30       	cpi	r24, 0x01	; 1
 7c0:	59 f4       	brne	.+22     	; 0x7d8 <finger_search_receive+0x46>
 7c2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7c6:	c8 2f       	mov	r28, r24
 7c8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7cc:	d0 e0       	ldi	r29, 0x00	; 0
 7ce:	dc 2f       	mov	r29, r28
 7d0:	cc 27       	eor	r28, r28
 7d2:	c8 0f       	add	r28, r24
 7d4:	d1 1d       	adc	r29, r1
 7d6:	0d c0       	rjmp	.+26     	; 0x7f2 <finger_search_receive+0x60>
 7d8:	89 30       	cpi	r24, 0x09	; 9
 7da:	49 f0       	breq	.+18     	; 0x7ee <finger_search_receive+0x5c>
 7dc:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7e0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7e4:	c8 2f       	mov	r28, r24
 7e6:	d0 e0       	ldi	r29, 0x00	; 0
 7e8:	dc 2f       	mov	r29, r28
 7ea:	cc 27       	eor	r28, r28
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <finger_search_receive+0x60>
 7ee:	c0 e0       	ldi	r28, 0x00	; 0
 7f0:	d0 e0       	ldi	r29, 0x00	; 0
 7f2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7f6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7fa:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 7fe:	0e 94 60 03 	call	0x6c0	; 0x6c0 <finger_uart_recieve>
 802:	ce 01       	movw	r24, r28
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <finger_get_response_string>:
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	8e 31       	cpi	r24, 0x1E	; 30
 80e:	91 05       	cpc	r25, r1
 810:	08 f0       	brcs	.+2      	; 0x814 <finger_get_response_string+0xa>
 812:	4a c0       	rjmp	.+148    	; 0x8a8 <finger_get_response_string+0x9e>
 814:	fc 01       	movw	r30, r24
 816:	ec 5c       	subi	r30, 0xCC	; 204
 818:	ff 4f       	sbci	r31, 0xFF	; 255
 81a:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__tablejump2__>
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	08 95       	ret
 824:	84 e1       	ldi	r24, 0x14	; 20
 826:	92 e0       	ldi	r25, 0x02	; 2
 828:	08 95       	ret
 82a:	8e e1       	ldi	r24, 0x1E	; 30
 82c:	92 e0       	ldi	r25, 0x02	; 2
 82e:	08 95       	ret
 830:	8d e2       	ldi	r24, 0x2D	; 45
 832:	92 e0       	ldi	r25, 0x02	; 2
 834:	08 95       	ret
 836:	8a e4       	ldi	r24, 0x4A	; 74
 838:	92 e0       	ldi	r25, 0x02	; 2
 83a:	08 95       	ret
 83c:	82 e6       	ldi	r24, 0x62	; 98
 83e:	92 e0       	ldi	r25, 0x02	; 2
 840:	08 95       	ret
 842:	87 e7       	ldi	r24, 0x77	; 119
 844:	92 e0       	ldi	r25, 0x02	; 2
 846:	08 95       	ret
 848:	81 e9       	ldi	r24, 0x91	; 145
 84a:	92 e0       	ldi	r25, 0x02	; 2
 84c:	08 95       	ret
 84e:	81 ea       	ldi	r24, 0xA1	; 161
 850:	92 e0       	ldi	r25, 0x02	; 2
 852:	08 95       	ret
 854:	80 eb       	ldi	r24, 0xB0	; 176
 856:	92 e0       	ldi	r25, 0x02	; 2
 858:	08 95       	ret
 85a:	81 ec       	ldi	r24, 0xC1	; 193
 85c:	92 e0       	ldi	r25, 0x02	; 2
 85e:	08 95       	ret
 860:	8a ed       	ldi	r24, 0xDA	; 218
 862:	92 e0       	ldi	r25, 0x02	; 2
 864:	08 95       	ret
 866:	8f ee       	ldi	r24, 0xEF	; 239
 868:	92 e0       	ldi	r25, 0x02	; 2
 86a:	08 95       	ret
 86c:	85 e0       	ldi	r24, 0x05	; 5
 86e:	93 e0       	ldi	r25, 0x03	; 3
 870:	08 95       	ret
 872:	8d e1       	ldi	r24, 0x1D	; 29
 874:	93 e0       	ldi	r25, 0x03	; 3
 876:	08 95       	ret
 878:	83 e3       	ldi	r24, 0x33	; 51
 87a:	93 e0       	ldi	r25, 0x03	; 3
 87c:	08 95       	ret
 87e:	83 e4       	ldi	r24, 0x43	; 67
 880:	93 e0       	ldi	r25, 0x03	; 3
 882:	08 95       	ret
 884:	89 e5       	ldi	r24, 0x59	; 89
 886:	93 e0       	ldi	r25, 0x03	; 3
 888:	08 95       	ret
 88a:	8d e6       	ldi	r24, 0x6D	; 109
 88c:	93 e0       	ldi	r25, 0x03	; 3
 88e:	08 95       	ret
 890:	8d e7       	ldi	r24, 0x7D	; 125
 892:	93 e0       	ldi	r25, 0x03	; 3
 894:	08 95       	ret
 896:	8e e8       	ldi	r24, 0x8E	; 142
 898:	93 e0       	ldi	r25, 0x03	; 3
 89a:	08 95       	ret
 89c:	86 ea       	ldi	r24, 0xA6	; 166
 89e:	93 e0       	ldi	r25, 0x03	; 3
 8a0:	08 95       	ret
 8a2:	89 eb       	ldi	r24, 0xB9	; 185
 8a4:	93 e0       	ldi	r25, 0x03	; 3
 8a6:	08 95       	ret
 8a8:	83 ed       	ldi	r24, 0xD3	; 211
 8aa:	93 e0       	ldi	r25, 0x03	; 3
 8ac:	08 95       	ret
 8ae:	86 ef       	ldi	r24, 0xF6	; 246
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	08 95       	ret

000008b4 <finger_read>:
 8b4:	83 e0       	ldi	r24, 0x03	; 3
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 94 68 03 	call	0x6d0	; 0x6d0 <finger_transmit_header>
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 8c8:	85 e0       	ldi	r24, 0x05	; 5
 8ca:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 8ce:	0e 94 87 03 	call	0x70e	; 0x70e <finger_receive>
 8d2:	2f ef       	ldi	r18, 0xFF	; 255
 8d4:	39 e6       	ldi	r19, 0x69	; 105
 8d6:	48 e1       	ldi	r20, 0x18	; 24
 8d8:	21 50       	subi	r18, 0x01	; 1
 8da:	30 40       	sbci	r19, 0x00	; 0
 8dc:	40 40       	sbci	r20, 0x00	; 0
 8de:	e1 f7       	brne	.-8      	; 0x8d8 <finger_read+0x24>
 8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <finger_read+0x2e>
 8e2:	00 00       	nop
 8e4:	89 2b       	or	r24, r25
 8e6:	31 f7       	brne	.-52     	; 0x8b4 <finger_read>
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	08 95       	ret

000008ee <finger_generate_char_file>:
 8ee:	cf 93       	push	r28
 8f0:	c8 2f       	mov	r28, r24
 8f2:	84 e0       	ldi	r24, 0x04	; 4
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <finger_transmit_header>
 8fa:	82 e0       	ldi	r24, 0x02	; 2
 8fc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 900:	8c 2f       	mov	r24, r28
 902:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 90c:	87 e0       	ldi	r24, 0x07	; 7
 90e:	8c 0f       	add	r24, r28
 910:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 914:	0e 94 87 03 	call	0x70e	; 0x70e <finger_receive>
 918:	cf 91       	pop	r28
 91a:	08 95       	ret

0000091c <finger_generate_template>:
 91c:	83 e0       	ldi	r24, 0x03	; 3
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 68 03 	call	0x6d0	; 0x6d0 <finger_transmit_header>
 924:	85 e0       	ldi	r24, 0x05	; 5
 926:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 930:	89 e0       	ldi	r24, 0x09	; 9
 932:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 936:	0e 94 87 03 	call	0x70e	; 0x70e <finger_receive>
 93a:	08 95       	ret

0000093c <finger_delete_all>:
 93c:	83 e0       	ldi	r24, 0x03	; 3
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 68 03 	call	0x6d0	; 0x6d0 <finger_transmit_header>
 944:	8d e0       	ldi	r24, 0x0D	; 13
 946:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 950:	81 e1       	ldi	r24, 0x11	; 17
 952:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 956:	0e 94 87 03 	call	0x70e	; 0x70e <finger_receive>
 95a:	08 95       	ret

0000095c <finger_store>:
 95c:	cf 93       	push	r28
 95e:	c8 2f       	mov	r28, r24
 960:	86 e0       	ldi	r24, 0x06	; 6
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 68 03 	call	0x6d0	; 0x6d0 <finger_transmit_header>
 968:	86 e0       	ldi	r24, 0x06	; 6
 96a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 97a:	8c 2f       	mov	r24, r28
 97c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 986:	8e e0       	ldi	r24, 0x0E	; 14
 988:	8c 0f       	add	r24, r28
 98a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 98e:	0e 94 87 03 	call	0x70e	; 0x70e <finger_receive>
 992:	cf 91       	pop	r28
 994:	08 95       	ret

00000996 <finger_search>:
 996:	88 e0       	ldi	r24, 0x08	; 8
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <finger_transmit_header>
 99e:	84 e0       	ldi	r24, 0x04	; 4
 9a0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 9c8:	8e e0       	ldi	r24, 0x0E	; 14
 9ca:	0e 94 58 03 	call	0x6b0	; 0x6b0 <finger_uart_transmit>
 9ce:	0e 94 c9 03 	call	0x792	; 0x792 <finger_search_receive>
 9d2:	08 95       	ret

000009d4 <__divmodhi4>:
 9d4:	97 fb       	bst	r25, 7
 9d6:	07 2e       	mov	r0, r23
 9d8:	16 f4       	brtc	.+4      	; 0x9de <__divmodhi4+0xa>
 9da:	00 94       	com	r0
 9dc:	07 d0       	rcall	.+14     	; 0x9ec <__divmodhi4_neg1>
 9de:	77 fd       	sbrc	r23, 7
 9e0:	09 d0       	rcall	.+18     	; 0x9f4 <__divmodhi4_neg2>
 9e2:	0e 94 04 05 	call	0xa08	; 0xa08 <__udivmodhi4>
 9e6:	07 fc       	sbrc	r0, 7
 9e8:	05 d0       	rcall	.+10     	; 0x9f4 <__divmodhi4_neg2>
 9ea:	3e f4       	brtc	.+14     	; 0x9fa <__divmodhi4_exit>

000009ec <__divmodhi4_neg1>:
 9ec:	90 95       	com	r25
 9ee:	81 95       	neg	r24
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	08 95       	ret

000009f4 <__divmodhi4_neg2>:
 9f4:	70 95       	com	r23
 9f6:	61 95       	neg	r22
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255

000009fa <__divmodhi4_exit>:
 9fa:	08 95       	ret

000009fc <__tablejump2__>:
 9fc:	ee 0f       	add	r30, r30
 9fe:	ff 1f       	adc	r31, r31
 a00:	05 90       	lpm	r0, Z+
 a02:	f4 91       	lpm	r31, Z
 a04:	e0 2d       	mov	r30, r0
 a06:	09 94       	ijmp

00000a08 <__udivmodhi4>:
 a08:	aa 1b       	sub	r26, r26
 a0a:	bb 1b       	sub	r27, r27
 a0c:	51 e1       	ldi	r21, 0x11	; 17
 a0e:	07 c0       	rjmp	.+14     	; 0xa1e <__udivmodhi4_ep>

00000a10 <__udivmodhi4_loop>:
 a10:	aa 1f       	adc	r26, r26
 a12:	bb 1f       	adc	r27, r27
 a14:	a6 17       	cp	r26, r22
 a16:	b7 07       	cpc	r27, r23
 a18:	10 f0       	brcs	.+4      	; 0xa1e <__udivmodhi4_ep>
 a1a:	a6 1b       	sub	r26, r22
 a1c:	b7 0b       	sbc	r27, r23

00000a1e <__udivmodhi4_ep>:
 a1e:	88 1f       	adc	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	5a 95       	dec	r21
 a24:	a9 f7       	brne	.-22     	; 0xa10 <__udivmodhi4_loop>
 a26:	80 95       	com	r24
 a28:	90 95       	com	r25
 a2a:	bc 01       	movw	r22, r24
 a2c:	cd 01       	movw	r24, r26
 a2e:	08 95       	ret

00000a30 <_exit>:
 a30:	f8 94       	cli

00000a32 <__stop_program>:
 a32:	ff cf       	rjmp	.-2      	; 0xa32 <__stop_program>
