
as608.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d8  00800100  0000075a  000007ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000075a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000aa6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002269  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c01  00000000  00000000  00002ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f51  00000000  00000000  00003aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  00004a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000620  00000000  00000000  00004d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000119f  00000000  00000000  00005324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  000064c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	3f 03       	fmul	r19, r23
  6a:	f7 02       	muls	r31, r23
  6c:	fa 02       	muls	r31, r26
  6e:	fd 02       	muls	r31, r29
  70:	3c 03       	fmul	r19, r20
  72:	3c 03       	fmul	r19, r20
  74:	00 03       	mulsu	r16, r16
  76:	03 03       	mulsu	r16, r19
  78:	06 03       	mulsu	r16, r22
  7a:	09 03       	fmul	r16, r17
  7c:	0c 03       	fmul	r16, r20
  7e:	0f 03       	fmul	r16, r23
  80:	12 03       	mulsu	r17, r18
  82:	15 03       	mulsu	r17, r21
  84:	18 03       	fmul	r17, r16
  86:	1b 03       	fmul	r17, r19
  88:	1e 03       	fmul	r17, r22
  8a:	21 03       	mulsu	r18, r17
  8c:	3c 03       	fmul	r19, r20
  8e:	24 03       	mulsu	r18, r20
  90:	3c 03       	fmul	r19, r20
  92:	27 03       	mulsu	r18, r23
  94:	3c 03       	fmul	r19, r20
  96:	3c 03       	fmul	r19, r20
  98:	2a 03       	fmul	r18, r18
  9a:	2d 03       	fmul	r18, r21
  9c:	30 03       	mulsu	r19, r16
  9e:	33 03       	mulsu	r19, r19
  a0:	36 03       	mulsu	r19, r22
  a2:	39 03       	fmul	r19, r17

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	13 e0       	ldi	r17, 0x03	; 3
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ea e5       	ldi	r30, 0x5A	; 90
  b8:	f7 e0       	ldi	r31, 0x07	; 7
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	a8 3d       	cpi	r26, 0xD8	; 216
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>
  c6:	0e 94 09 02 	call	0x412	; 0x412 <main>
  ca:	0c 94 ab 03 	jmp	0x756	; 0x756 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <LCDBusyLoop>:
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	5e 9a       	sbi	0x0b, 6	; 11
  da:	5b 98       	cbi	0x0b, 3	; 11
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDBusyLoop+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x12>
  e4:	2c 9a       	sbi	0x05, 4	; 5
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	9a 95       	dec	r25
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCDBusyLoop+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCDBusyLoop+0x1c>
  ee:	83 b1       	in	r24, 0x03	; 3
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCDBusyLoop+0x24>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCDBusyLoop+0x2a>
  fc:	2c 98       	cbi	0x05, 4	; 5
  fe:	95 e0       	ldi	r25, 0x05	; 5
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <LCDBusyLoop+0x2e>
 104:	00 00       	nop
 106:	2c 9a       	sbi	0x05, 4	; 5
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCDBusyLoop+0x38>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCDBusyLoop+0x3e>
 110:	93 b1       	in	r25, 0x03	; 3
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	9a 95       	dec	r25
 116:	f1 f7       	brne	.-4      	; 0x114 <LCDBusyLoop+0x42>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCDBusyLoop+0x48>
 11a:	2c 98       	cbi	0x05, 4	; 5
 11c:	95 e0       	ldi	r25, 0x05	; 5
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <LCDBusyLoop+0x4c>
 122:	00 00       	nop
 124:	88 23       	and	r24, r24
 126:	f4 f2       	brlt	.-68     	; 0xe4 <LCDBusyLoop+0x12>
 128:	5e 98       	cbi	0x0b, 6	; 11
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	84 b9       	out	0x04, r24	; 4
 130:	08 95       	ret

00000132 <LCDByte>:
 132:	28 2f       	mov	r18, r24
 134:	22 95       	swap	r18
 136:	2f 70       	andi	r18, 0x0F	; 15
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	61 11       	cpse	r22, r1
 13c:	02 c0       	rjmp	.+4      	; 0x142 <LCDByte+0x10>
 13e:	5b 98       	cbi	0x0b, 3	; 11
 140:	01 c0       	rjmp	.+2      	; 0x144 <LCDByte+0x12>
 142:	5b 9a       	sbi	0x0b, 3	; 11
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDByte+0x14>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDByte+0x1a>
 14c:	2c 9a       	sbi	0x05, 4	; 5
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	90 7f       	andi	r25, 0xF0	; 240
 152:	92 2b       	or	r25, r18
 154:	95 b9       	out	0x05, r25	; 5
 156:	95 e0       	ldi	r25, 0x05	; 5
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDByte+0x26>
 15c:	00 00       	nop
 15e:	2c 98       	cbi	0x05, 4	; 5
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDByte+0x30>
 166:	00 00       	nop
 168:	2c 9a       	sbi	0x05, 4	; 5
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	90 7f       	andi	r25, 0xF0	; 240
 16e:	89 2b       	or	r24, r25
 170:	85 b9       	out	0x05, r24	; 5
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <LCDByte+0x42>
 178:	00 00       	nop
 17a:	2c 98       	cbi	0x05, 4	; 5
 17c:	95 e0       	ldi	r25, 0x05	; 5
 17e:	9a 95       	dec	r25
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDByte+0x4c>
 182:	00 00       	nop
 184:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDBusyLoop>
 188:	08 95       	ret

0000018a <LCDWriteString>:
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
 194:	fc 01       	movw	r30, r24
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	09 f1       	breq	.+66     	; 0x1de <LCDWriteString+0x54>
 19c:	85 32       	cpi	r24, 0x25	; 37
 19e:	a9 f4       	brne	.+42     	; 0x1ca <LCDWriteString+0x40>
 1a0:	e8 01       	movw	r28, r16
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	f8 01       	movw	r30, r16
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	80 53       	subi	r24, 0x30	; 48
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <LCDWriteString+0x2c>
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 1b4:	0e c0       	rjmp	.+28     	; 0x1d2 <LCDWriteString+0x48>
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	f8 01       	movw	r30, r16
 1c2:	81 81       	ldd	r24, Z+1	; 0x01
 1c4:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <LCDWriteString+0x48>
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 1d0:	e8 01       	movw	r28, r16
 1d2:	8e 01       	movw	r16, r28
 1d4:	0f 5f       	subi	r16, 0xFF	; 255
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	81 11       	cpse	r24, r1
 1dc:	df cf       	rjmp	.-66     	; 0x19c <LCDWriteString+0x12>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <LCDGotoXY>:
 1e8:	84 31       	cpi	r24, 0x14	; 20
 1ea:	78 f4       	brcc	.+30     	; 0x20a <LCDGotoXY+0x22>
 1ec:	62 30       	cpi	r22, 0x02	; 2
 1ee:	31 f0       	breq	.+12     	; 0x1fc <LCDGotoXY+0x14>
 1f0:	63 30       	cpi	r22, 0x03	; 3
 1f2:	31 f0       	breq	.+12     	; 0x200 <LCDGotoXY+0x18>
 1f4:	61 30       	cpi	r22, 0x01	; 1
 1f6:	29 f4       	brne	.+10     	; 0x202 <LCDGotoXY+0x1a>
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <LCDGotoXY+0x1a>
 1fc:	8c 5e       	subi	r24, 0xEC	; 236
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <LCDGotoXY+0x1a>
 200:	8c 5a       	subi	r24, 0xAC	; 172
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	80 68       	ori	r24, 0x80	; 128
 206:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 20a:	08 95       	ret

0000020c <LCDInit>:
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	86 e7       	ldi	r24, 0x76	; 118
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <LCDInit+0x10>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCDInit+0x1a>
 226:	00 00       	nop
 228:	84 b1       	in	r24, 0x04	; 4
 22a:	8f 60       	ori	r24, 0x0F	; 15
 22c:	84 b9       	out	0x04, r24	; 4
 22e:	24 9a       	sbi	0x04, 4	; 4
 230:	53 9a       	sbi	0x0a, 3	; 10
 232:	56 9a       	sbi	0x0a, 6	; 10
 234:	85 b1       	in	r24, 0x05	; 5
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	85 b9       	out	0x05, r24	; 5
 23a:	2c 98       	cbi	0x05, 4	; 5
 23c:	5e 98       	cbi	0x0b, 6	; 11
 23e:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCDInit+0x36>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCDInit+0x38>
 244:	00 00       	nop
 246:	2c 9a       	sbi	0x05, 4	; 5
 248:	29 9a       	sbi	0x05, 1	; 5
 24a:	25 e0       	ldi	r18, 0x05	; 5
 24c:	2a 95       	dec	r18
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCDInit+0x40>
 250:	00 00       	nop
 252:	2c 98       	cbi	0x05, 4	; 5
 254:	85 e0       	ldi	r24, 0x05	; 5
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <LCDInit+0x4a>
 25a:	00 00       	nop
 25c:	0e 94 69 00 	call	0xd2	; 0xd2 <LCDBusyLoop>
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	8c 2f       	mov	r24, r28
 264:	8c 60       	ori	r24, 0x0C	; 12
 266:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	80 e4       	ldi	r24, 0x40	; 64
 276:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d1 e0       	ldi	r29, 0x01	; 1
 27e:	00 e4       	ldi	r16, 0x40	; 64
 280:	11 e0       	ldi	r17, 0x01	; 1
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	89 91       	ld	r24, Y+
 286:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 28a:	c0 17       	cp	r28, r16
 28c:	d1 07       	cpc	r29, r17
 28e:	c9 f7       	brne	.-14     	; 0x282 <LCDInit+0x76>
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	08 95       	ret

000002a2 <LCDClearLineXY>:
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	d8 2f       	mov	r29, r24
 2aa:	16 2f       	mov	r17, r22
 2ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 2b0:	d0 31       	cpi	r29, 0x10	; 16
 2b2:	40 f4       	brcc	.+16     	; 0x2c4 <LCDClearLineXY+0x22>
 2b4:	cd 2f       	mov	r28, r29
 2b6:	80 e4       	ldi	r24, 0x40	; 64
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 2be:	cf 5f       	subi	r28, 0xFF	; 255
 2c0:	c0 31       	cpi	r28, 0x10	; 16
 2c2:	c9 f7       	brne	.-14     	; 0x2b6 <LCDClearLineXY+0x14>
 2c4:	61 2f       	mov	r22, r17
 2c6:	8d 2f       	mov	r24, r29
 2c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	08 95       	ret

000002d4 <mux>:
	process_result(finger_generate_template());
	LCDClear();
	LCDWriteStringXY(0,0,"Storing..");
	process_result(finger_store(2));
	_delay_ms(4000);	
	LCDClear();
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	19 f4       	brne	.+6      	; 0x2de <mux+0xa>
 2d8:	44 9a       	sbi	0x08, 4	; 8
 2da:	45 98       	cbi	0x08, 5	; 8
 2dc:	08 95       	ret
 2de:	44 98       	cbi	0x08, 4	; 8
 2e0:	45 98       	cbi	0x08, 5	; 8
 2e2:	08 95       	ret

000002e4 <keys_init>:
 2e4:	38 98       	cbi	0x07, 0	; 7
 2e6:	3a 98       	cbi	0x07, 2	; 7
 2e8:	40 9a       	sbi	0x08, 0	; 8
 2ea:	42 9a       	sbi	0x08, 2	; 8
 2ec:	08 95       	ret

000002ee <process_result>:
 2ee:	cf 93       	push	r28
 2f0:	c8 2f       	mov	r28, r24
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCDClearLineXY>
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 302:	8c 2f       	mov	r24, r28
 304:	0e 94 ed 02 	call	0x5da	; 0x5da <finger_get_response_string>
 308:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	87 ea       	ldi	r24, 0xA7	; 167
 310:	91 e6       	ldi	r25, 0x61	; 97
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <process_result+0x24>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <process_result+0x2e>
 31c:	00 00       	nop
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <finger_scan>:
}


void finger_scan()
{   uint16_t code;
	LCDClear();
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Welcome!");
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 332:	84 ea       	ldi	r24, 0xA4	; 164
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	LCDWriteStringXY(0,1,"Place finger");
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 342:	8d ea       	ldi	r24, 0xAD	; 173
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_read());
 34a:	0e 94 42 03 	call	0x684	; 0x684 <finger_read>
 34e:	0e 94 77 01 	call	0x2ee	; 0x2ee <process_result>
	LCDClear();
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Scanning...");
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 362:	8a eb       	ldi	r24, 0xBA	; 186
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	83 ed       	ldi	r24, 0xD3	; 211
 36e:	90 e3       	ldi	r25, 0x30	; 48
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <finger_scan+0x4e>
 378:	00 c0       	rjmp	.+0      	; 0x37a <finger_scan+0x58>
 37a:	00 00       	nop
	_delay_ms(1000);
	LCDWriteStringXY(0,1,"Completed");
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 384:	86 ec       	ldi	r24, 0xC6	; 198
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 38c:	2f ef       	ldi	r18, 0xFF	; 255
 38e:	83 ed       	ldi	r24, 0xD3	; 211
 390:	90 e3       	ldi	r25, 0x30	; 48
 392:	21 50       	subi	r18, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <finger_scan+0x70>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <finger_scan+0x7a>
 39c:	00 00       	nop
	_delay_ms(1000);
	LCDClear();
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"generating char");
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 3ae:	80 ed       	ldi	r24, 0xD0	; 208
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	process_result(finger_generate_char_file(1));
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 5f 03 	call	0x6be	; 0x6be <finger_generate_char_file>
 3be:	0e 94 77 01 	call	0x2ee	; 0x2ee <process_result>
	process_result(finger_generate_char_file(2));
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 5f 03 	call	0x6be	; 0x6be <finger_generate_char_file>
 3ca:	0e 94 77 01 	call	0x2ee	; 0x2ee <process_result>
	process_result(finger_generate_template());
 3ce:	0e 94 76 03 	call	0x6ec	; 0x6ec <finger_generate_template>
 3d2:	0e 94 77 01 	call	0x2ee	; 0x2ee <process_result>
	LCDClear();
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
	LCDWriteStringXY(0,0,"Searching...");
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 3e6:	80 ee       	ldi	r24, 0xE0	; 224
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
	code = finger_search();
 3ee:	0e 94 86 03 	call	0x70c	; 0x70c <finger_search>
	process_result(code);
 3f2:	0e 94 77 01 	call	0x2ee	; 0x2ee <process_result>
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	8f e4       	ldi	r24, 0x4F	; 79
 3fa:	93 ec       	ldi	r25, 0xC3	; 195
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <finger_scan+0xda>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	//upImg();
	//upChar(1);
	//finger_store(1);
	_delay_ms(4000);
	LCDClear();
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
 410:	08 95       	ret

00000412 <main>:
char spi_tranceiver(char data);


int main(void)
{
	LCDInit(LS_NONE);
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 06 01 	call	0x20c	; 0x20c <LCDInit>
	finger_init();
 418:	0e 94 30 02 	call	0x460	; 0x460 <finger_init>
	keys_init();
 41c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <keys_init>
	DDRC |= 1<<PINC5;
 420:	3d 9a       	sbi	0x07, 5	; 7
	PORTC |= 1<<PINC5 | 1<<PINC4;
 422:	88 b1       	in	r24, 0x08	; 8
 424:	80 63       	ori	r24, 0x30	; 48
 426:	88 b9       	out	0x08, r24	; 8
	
	mux(FINGER_ENABLE);
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <mux>
	LCDClear();
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 99 00 	call	0x132	; 0x132 <LCDByte>
    while (1) 
    { 
		LCDWriteStringXY(0,0,"Welcome!");
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCDGotoXY>
 440:	84 ea       	ldi	r24, 0xA4	; 164
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 c5 00 	call	0x18a	; 0x18a <LCDWriteString>
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	87 ea       	ldi	r24, 0xA7	; 167
 44c:	91 e6       	ldi	r25, 0x61	; 97
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <main+0x3c>
 456:	00 c0       	rjmp	.+0      	; 0x458 <main+0x46>
 458:	00 00       	nop
		_delay_ms(2000);
		
		finger_scan();
 45a:	0e 94 91 01 	call	0x322	; 0x322 <finger_scan>
 45e:	ec cf       	rjmp	.-40     	; 0x438 <main+0x26>

00000460 <finger_init>:
	location += 21;
	finger_uart_transmit(location & 0xFF00);
	finger_uart_transmit(location & 0x00FF);
	
	return finger_receive();
}
 460:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 464:	80 e1       	ldi	r24, 0x10	; 16
 466:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 46a:	e1 ec       	ldi	r30, 0xC1	; 193
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	88 61       	ori	r24, 0x18	; 24
 472:	80 83       	st	Z, r24
 474:	e2 ec       	ldi	r30, 0xC2	; 194
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	8e 60       	ori	r24, 0x0E	; 14
 47c:	80 83       	st	Z, r24
 47e:	08 95       	ret

00000480 <finger_uart_transmit>:
 480:	e0 ec       	ldi	r30, 0xC0	; 192
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	90 81       	ld	r25, Z
 486:	95 ff       	sbrs	r25, 5
 488:	fd cf       	rjmp	.-6      	; 0x484 <finger_uart_transmit+0x4>
 48a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 48e:	08 95       	ret

00000490 <finger_uart_recieve>:
 490:	e0 ec       	ldi	r30, 0xC0	; 192
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	88 23       	and	r24, r24
 498:	ec f7       	brge	.-6      	; 0x494 <finger_uart_recieve+0x4>
 49a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 49e:	08 95       	ret

000004a0 <finger_transmit_header>:
 4a0:	cf 93       	push	r28
 4a2:	c8 2f       	mov	r28, r24
 4a4:	8f ee       	ldi	r24, 0xEF	; 239
 4a6:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4b0:	8f ef       	ldi	r24, 0xFF	; 255
 4b2:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4d4:	8c 2f       	mov	r24, r28
 4d6:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <finger_receive>:
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 4ea:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 4ee:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 4f2:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 4f6:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 4fa:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 4fe:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 502:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 506:	c8 2f       	mov	r28, r24
 508:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 50c:	d0 e0       	ldi	r29, 0x00	; 0
 50e:	dc 2f       	mov	r29, r28
 510:	cc 27       	eor	r28, r28
 512:	c8 2b       	or	r28, r24
 514:	22 97       	sbiw	r28, 0x02	; 2
 516:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 51a:	08 2f       	mov	r16, r24
 51c:	10 e0       	ldi	r17, 0x00	; 0
 51e:	c2 30       	cpi	r28, 0x02	; 2
 520:	d1 05       	cpc	r29, r1
 522:	39 f4       	brne	.+14     	; 0x532 <finger_receive+0x54>
 524:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 528:	08 2f       	mov	r16, r24
 52a:	10 e0       	ldi	r17, 0x00	; 0
 52c:	10 2f       	mov	r17, r16
 52e:	00 27       	eor	r16, r16
 530:	0e c0       	rjmp	.+28     	; 0x54e <finger_receive+0x70>
 532:	23 97       	sbiw	r28, 0x03	; 3
 534:	61 f4       	brne	.+24     	; 0x54e <finger_receive+0x70>
 536:	01 15       	cp	r16, r1
 538:	11 05       	cpc	r17, r1
 53a:	49 f4       	brne	.+18     	; 0x54e <finger_receive+0x70>
 53c:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 540:	08 2f       	mov	r16, r24
 542:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 546:	10 e0       	ldi	r17, 0x00	; 0
 548:	10 2f       	mov	r17, r16
 54a:	00 27       	eor	r16, r16
 54c:	08 2b       	or	r16, r24
 54e:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 552:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 556:	c8 01       	movw	r24, r16
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	08 95       	ret

00000562 <finger_search_receive>:
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 56a:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 56e:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 572:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 576:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 57a:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 57e:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 582:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 586:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 58a:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	59 f4       	brne	.+22     	; 0x5a8 <finger_search_receive+0x46>
 592:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 596:	c8 2f       	mov	r28, r24
 598:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 59c:	d0 e0       	ldi	r29, 0x00	; 0
 59e:	dc 2f       	mov	r29, r28
 5a0:	cc 27       	eor	r28, r28
 5a2:	c8 0f       	add	r28, r24
 5a4:	d1 1d       	adc	r29, r1
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <finger_search_receive+0x60>
 5a8:	89 30       	cpi	r24, 0x09	; 9
 5aa:	49 f0       	breq	.+18     	; 0x5be <finger_search_receive+0x5c>
 5ac:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 5b0:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 5b4:	c8 2f       	mov	r28, r24
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
 5b8:	dc 2f       	mov	r29, r28
 5ba:	cc 27       	eor	r28, r28
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <finger_search_receive+0x60>
 5be:	c0 e0       	ldi	r28, 0x00	; 0
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
 5c2:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 5c6:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 5ca:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 5ce:	0e 94 48 02 	call	0x490	; 0x490 <finger_uart_recieve>
 5d2:	ce 01       	movw	r24, r28
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <finger_get_response_string>:
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	8e 31       	cpi	r24, 0x1E	; 30
 5de:	91 05       	cpc	r25, r1
 5e0:	08 f0       	brcs	.+2      	; 0x5e4 <finger_get_response_string+0xa>
 5e2:	4a c0       	rjmp	.+148    	; 0x678 <finger_get_response_string+0x9e>
 5e4:	fc 01       	movw	r30, r24
 5e6:	ec 5c       	subi	r30, 0xCC	; 204
 5e8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ea:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__tablejump2__>
 5ee:	86 ef       	ldi	r24, 0xF6	; 246
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	08 95       	ret
 5f4:	8b e0       	ldi	r24, 0x0B	; 11
 5f6:	92 e0       	ldi	r25, 0x02	; 2
 5f8:	08 95       	ret
 5fa:	85 e1       	ldi	r24, 0x15	; 21
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	08 95       	ret
 600:	84 e2       	ldi	r24, 0x24	; 36
 602:	92 e0       	ldi	r25, 0x02	; 2
 604:	08 95       	ret
 606:	81 e4       	ldi	r24, 0x41	; 65
 608:	92 e0       	ldi	r25, 0x02	; 2
 60a:	08 95       	ret
 60c:	89 e5       	ldi	r24, 0x59	; 89
 60e:	92 e0       	ldi	r25, 0x02	; 2
 610:	08 95       	ret
 612:	8e e6       	ldi	r24, 0x6E	; 110
 614:	92 e0       	ldi	r25, 0x02	; 2
 616:	08 95       	ret
 618:	88 e8       	ldi	r24, 0x88	; 136
 61a:	92 e0       	ldi	r25, 0x02	; 2
 61c:	08 95       	ret
 61e:	88 e9       	ldi	r24, 0x98	; 152
 620:	92 e0       	ldi	r25, 0x02	; 2
 622:	08 95       	ret
 624:	87 ea       	ldi	r24, 0xA7	; 167
 626:	92 e0       	ldi	r25, 0x02	; 2
 628:	08 95       	ret
 62a:	88 eb       	ldi	r24, 0xB8	; 184
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	08 95       	ret
 630:	81 ed       	ldi	r24, 0xD1	; 209
 632:	92 e0       	ldi	r25, 0x02	; 2
 634:	08 95       	ret
 636:	86 ee       	ldi	r24, 0xE6	; 230
 638:	92 e0       	ldi	r25, 0x02	; 2
 63a:	08 95       	ret
 63c:	8c ef       	ldi	r24, 0xFC	; 252
 63e:	92 e0       	ldi	r25, 0x02	; 2
 640:	08 95       	ret
 642:	84 e1       	ldi	r24, 0x14	; 20
 644:	93 e0       	ldi	r25, 0x03	; 3
 646:	08 95       	ret
 648:	8a e2       	ldi	r24, 0x2A	; 42
 64a:	93 e0       	ldi	r25, 0x03	; 3
 64c:	08 95       	ret
 64e:	8a e3       	ldi	r24, 0x3A	; 58
 650:	93 e0       	ldi	r25, 0x03	; 3
 652:	08 95       	ret
 654:	80 e5       	ldi	r24, 0x50	; 80
 656:	93 e0       	ldi	r25, 0x03	; 3
 658:	08 95       	ret
 65a:	84 e6       	ldi	r24, 0x64	; 100
 65c:	93 e0       	ldi	r25, 0x03	; 3
 65e:	08 95       	ret
 660:	84 e7       	ldi	r24, 0x74	; 116
 662:	93 e0       	ldi	r25, 0x03	; 3
 664:	08 95       	ret
 666:	85 e8       	ldi	r24, 0x85	; 133
 668:	93 e0       	ldi	r25, 0x03	; 3
 66a:	08 95       	ret
 66c:	8d e9       	ldi	r24, 0x9D	; 157
 66e:	93 e0       	ldi	r25, 0x03	; 3
 670:	08 95       	ret
 672:	80 eb       	ldi	r24, 0xB0	; 176
 674:	93 e0       	ldi	r25, 0x03	; 3
 676:	08 95       	ret
 678:	8a ec       	ldi	r24, 0xCA	; 202
 67a:	93 e0       	ldi	r25, 0x03	; 3
 67c:	08 95       	ret
 67e:	8d ee       	ldi	r24, 0xED	; 237
 680:	91 e0       	ldi	r25, 0x01	; 1
 682:	08 95       	ret

00000684 <finger_read>:
 684:	83 e0       	ldi	r24, 0x03	; 3
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 50 02 	call	0x4a0	; 0x4a0 <finger_transmit_header>
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 698:	85 e0       	ldi	r24, 0x05	; 5
 69a:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 69e:	0e 94 6f 02 	call	0x4de	; 0x4de <finger_receive>
 6a2:	2f ef       	ldi	r18, 0xFF	; 255
 6a4:	39 e6       	ldi	r19, 0x69	; 105
 6a6:	48 e1       	ldi	r20, 0x18	; 24
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	30 40       	sbci	r19, 0x00	; 0
 6ac:	40 40       	sbci	r20, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <finger_read+0x24>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <finger_read+0x2e>
 6b2:	00 00       	nop
 6b4:	89 2b       	or	r24, r25
 6b6:	31 f7       	brne	.-52     	; 0x684 <finger_read>
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	08 95       	ret

000006be <finger_generate_char_file>:
 6be:	cf 93       	push	r28
 6c0:	c8 2f       	mov	r28, r24
 6c2:	84 e0       	ldi	r24, 0x04	; 4
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <finger_transmit_header>
 6ca:	82 e0       	ldi	r24, 0x02	; 2
 6cc:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 6d0:	8c 2f       	mov	r24, r28
 6d2:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 6dc:	87 e0       	ldi	r24, 0x07	; 7
 6de:	8c 0f       	add	r24, r28
 6e0:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 6e4:	0e 94 6f 02 	call	0x4de	; 0x4de <finger_receive>
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <finger_generate_template>:
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <finger_transmit_header>
 6f4:	85 e0       	ldi	r24, 0x05	; 5
 6f6:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 700:	89 e0       	ldi	r24, 0x09	; 9
 702:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
 706:	0e 94 6f 02 	call	0x4de	; 0x4de <finger_receive>
 70a:	08 95       	ret

0000070c <finger_search>:

uint16_t finger_search(){
	finger_transmit_header(0x0008);
 70c:	88 e0       	ldi	r24, 0x08	; 8
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 50 02 	call	0x4a0	; 0x4a0 <finger_transmit_header>
	
	finger_uart_transmit(0x04); //instruction
 714:	84 e0       	ldi	r24, 0x04	; 4
 716:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
	
	finger_uart_transmit(0x01); //buffer = 1
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
	
	//start location
	finger_uart_transmit(0x00);
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
	finger_uart_transmit(0x01);
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
	
	//length
	finger_uart_transmit(0x00);
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
	finger_uart_transmit(0xFF);
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
	
	//sum
	finger_uart_transmit(0x01);
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
	finger_uart_transmit(0x0E);
 73e:	8e e0       	ldi	r24, 0x0E	; 14
 740:	0e 94 40 02 	call	0x480	; 0x480 <finger_uart_transmit>
	
	return finger_search_receive();
 744:	0e 94 b1 02 	call	0x562	; 0x562 <finger_search_receive>
 748:	08 95       	ret

0000074a <__tablejump2__>:
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	05 90       	lpm	r0, Z+
 750:	f4 91       	lpm	r31, Z
 752:	e0 2d       	mov	r30, r0
 754:	09 94       	ijmp

00000756 <_exit>:
 756:	f8 94       	cli

00000758 <__stop_program>:
 758:	ff cf       	rjmp	.-2      	; 0x758 <__stop_program>
